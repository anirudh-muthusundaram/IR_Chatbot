{"ast":null,"code":"var _jsxFileName = \"C:\\\\College\\\\IR\\\\Project Final\\\\web\\\\cyber-seeker\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const sendMessage = event => {\n    event.preventDefault();\n    if (input) {\n      setMessages([...messages, {\n        text: input,\n        sender: 'user'\n      }]);\n      processUserMessage(input);\n      setInput('');\n    }\n  };\n  const processUserMessage = async message => {\n    try {\n      // Replace 'http://localhost:5000/chat' with the actual URL to your backend service\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: message\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setMessages(messages => [...messages, {\n          text: data.response,\n          sender: 'bot'\n        }]);\n      } else {\n        console.error('Failed to send message:', response.statusText);\n      }\n    } catch (error) {\n      console.error('There was a problem with the fetch operation:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-box\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender === 'user' ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Say something...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"Xhz1M2btVGAzY17pd7+8a34J2bk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","input","setInput","messages","setMessages","sendMessage","event","preventDefault","text","sender","processUserMessage","message","response","fetch","method","headers","body","JSON","stringify","ok","data","json","console","error","statusText","className","children","id","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/College/IR/Project Final/web/cyber-seeker/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        if (input) {\r\n            setMessages([...messages, { text: input, sender: 'user' }]);\r\n            processUserMessage(input);\r\n            setInput('');\r\n        }\r\n    };\r\n\r\n    const processUserMessage = async (message) => {\r\n        try {\r\n            // Replace 'http://localhost:5000/chat' with the actual URL to your backend service\r\n            const response = await fetch('http://127.0.0.1:5000/chat', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ message: message })\r\n            });\r\n    \r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setMessages(messages => [...messages, { text: data.response, sender: 'bot' }]);\r\n            } else {\r\n                console.error('Failed to send message:', response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error('There was a problem with the fetch operation:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div id=\"chat-box\">\r\n                {messages.map((message, index) => (\r\n                    <div key={index} className={`message ${message.sender === 'user' ? 'user' : 'bot'}`}>\r\n                        {message.text}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <form onSubmit={sendMessage}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Say something...\"\r\n                />\r\n                <button type=\"submit\">Send</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}