{"ast":null,"code":"var _jsxFileName = \"C:\\\\College\\\\IR\\\\Project Final\\\\web\\\\cyber-seeker\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const sendMessage = event => {\n    event.preventDefault();\n    if (input) {\n      setMessages([...messages, {\n        text: input,\n        sender: 'user'\n      }]);\n      processUserMessage(input);\n      setInput('');\n    }\n  };\n  const processUserMessage = message => {\n    // Here, you can add the logic for the bot's response\n    const botReply = \"I'm not sure how to respond to that.\";\n    setMessages(messages => [...messages, {\n      text: botReply,\n      sender: 'bot'\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-box\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.sender,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Say something...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"Xhz1M2btVGAzY17pd7+8a34J2bk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","input","setInput","messages","setMessages","sendMessage","event","preventDefault","text","sender","processUserMessage","message","botReply","className","children","id","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/College/IR/Project Final/web/cyber-seeker/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        if (input) {\r\n            setMessages([...messages, { text: input, sender: 'user' }]);\r\n            processUserMessage(input);\r\n            setInput('');\r\n        }\r\n    };\r\n\r\n    const processUserMessage = (message) => {\r\n        // Here, you can add the logic for the bot's response\r\n        const botReply = \"I'm not sure how to respond to that.\";\r\n        setMessages(messages => [...messages, { text: botReply, sender: 'bot' }]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div id=\"chat-box\">\r\n                {messages.map((message, index) => (\r\n                    <div key={index} className={message.sender}>\r\n                        {message.text}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <form onSubmit={sendMessage}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Say something...\"\r\n                />\r\n                <button type=\"submit\">Send</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,WAAW,GAAIC,KAAK,IAAK;IAC3BA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAIN,KAAK,EAAE;MACPG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEK,IAAI,EAAEP,KAAK;QAAEQ,MAAM,EAAE;MAAO,CAAC,CAAC,CAAC;MAC3DC,kBAAkB,CAACT,KAAK,CAAC;MACzBC,QAAQ,CAAC,EAAE,CAAC;IAChB;EACJ,CAAC;EAED,MAAMQ,kBAAkB,GAAIC,OAAO,IAAK;IACpC;IACA,MAAMC,QAAQ,GAAG,sCAAsC;IACvDR,WAAW,CAACD,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAE;MAAEK,IAAI,EAAEI,QAAQ;MAAEH,MAAM,EAAE;IAAM,CAAC,CAAC,CAAC;EAC7E,CAAC;EAED,oBACIX,OAAA;IAAKe,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3BhB,OAAA;MAAKiB,EAAE,EAAC,UAAU;MAAAD,QAAA,EACbX,QAAQ,CAACa,GAAG,CAAC,CAACL,OAAO,EAAEM,KAAK,kBACzBnB,OAAA;QAAiBe,SAAS,EAAEF,OAAO,CAACF,MAAO;QAAAK,QAAA,EACtCH,OAAO,CAACH;MAAI,GADPS,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNvB,OAAA;MAAMwB,QAAQ,EAAEjB,WAAY;MAAAS,QAAA,gBACxBhB,OAAA;QACIyB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEvB,KAAM;QACbwB,QAAQ,EAAGC,CAAC,IAAKxB,QAAQ,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC1CI,WAAW,EAAC;MAAkB;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,eACFvB,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAAAT,QAAA,EAAC;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAACrB,EAAA,CAvCID,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AAyCb,eAAeA,OAAO;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}