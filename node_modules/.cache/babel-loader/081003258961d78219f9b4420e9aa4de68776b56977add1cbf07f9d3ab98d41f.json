{"ast":null,"code":"var _jsxFileName = \"C:\\\\College\\\\IR\\\\Project Final\\\\web\\\\cyber-seeker\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\nimport TopicDistributionPieChart from './TopicDistributionPieChart';\nimport TotalQueries from './TotalQueries';\nimport { Chart as ChartJS, CategoryScale, LinearScale, ArcElement, Tooltip, Legend } from 'chart.js';\n\n// Register the necessary components for Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, ArcElement, Tooltip, Legend);\nconst Chatbot = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [showChart, setShowChart] = useState(false); // Added state for toggling the chart\n  const chatBoxRef = useRef(null);\n  const [showTotalQueries, setShowTotalQueries] = useState(false); // State to toggle total queries\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat box whenever messages change\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const sendMessage = event => {\n    event.preventDefault();\n    if (input) {\n      setMessages([...messages, {\n        text: input,\n        sender: 'user'\n      }]);\n      processUserMessage(input);\n      setInput('');\n    }\n  };\n  const processUserMessage = async message => {\n    try {\n      // Fetch API call to the Flask server\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: message\n        })\n      });\n\n      // Handling the response from the server\n      if (response.ok) {\n        const data = await response.json();\n        // Initialize an empty array for response messages\n        let responseMessages = [];\n\n        // If user_topic is present in the response, add it to the messages first\n        if (data.user_topic) {\n          responseMessages.push({\n            text: `Topic: ${data.user_topic}`,\n            sender: 'bot'\n          });\n        }\n\n        // Add the response summary next\n        responseMessages.push({\n          text: data.response,\n          sender: 'bot'\n        });\n\n        // Update the state with the new messages\n        setMessages(messages => [...messages, ...responseMessages]);\n      } else {\n        console.error('Failed to send message:', response.statusText);\n      }\n    } catch (error) {\n      console.error('There was a problem with the fetch operation:', error);\n    }\n  };\n  const toggleChartVisibility = () => {\n    // Function to toggle the visibility of the chart\n    setShowChart(!showChart);\n  };\n  const hideChart = () => {\n    // Function to hide the chart\n    setShowChart(false);\n  };\n  const toggleTotalQueriesVisibility = () => {\n    setShowTotalQueries(!showTotalQueries);\n    if (!showTotalQueries) {\n      // Fetch and log the total queries when showing the queries\n      fetchTotalQueries();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-box\",\n      ref: chatBoxRef,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender === 'user' ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Say something...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-chart-btn\",\n        onClick: toggleChartVisibility,\n        children: showChart ? \"Hide Chart\" : \"Show Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }, this), showChart && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hide-chart-btn\",\n        onClick: hideChart,\n        children: \"Hide Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"show-queries-btn\",\n        onClick: toggleTotalQueriesVisibility,\n        children: showTotalQueries ? \"Hide Queries\" : \"Show Queries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), showChart && /*#__PURE__*/_jsxDEV(TopicDistributionPieChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"PViiAjtSNNhOGRd6w/SzRr99jcM=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TopicDistributionPieChart","TotalQueries","Chart","ChartJS","CategoryScale","LinearScale","ArcElement","Tooltip","Legend","jsxDEV","_jsxDEV","register","Chatbot","_s","input","setInput","messages","setMessages","showChart","setShowChart","chatBoxRef","showTotalQueries","setShowTotalQueries","current","scrollTop","scrollHeight","sendMessage","event","preventDefault","text","sender","processUserMessage","message","response","fetch","method","headers","body","JSON","stringify","ok","data","json","responseMessages","user_topic","push","console","error","statusText","toggleChartVisibility","hideChart","toggleTotalQueriesVisibility","fetchTotalQueries","className","children","id","ref","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/College/IR/Project Final/web/cyber-seeker/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chatbot.css';\r\nimport TopicDistributionPieChart from './TopicDistributionPieChart';\r\nimport TotalQueries from './TotalQueries';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Register the necessary components for Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Chatbot = () => {\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [showChart, setShowChart] = useState(false); // Added state for toggling the chart\r\n    const chatBoxRef = useRef(null);\r\n    const [showTotalQueries, setShowTotalQueries] = useState(false); // State to toggle total queries\r\n    \r\n    useEffect(() => {\r\n        // Scroll to the bottom of the chat box whenever messages change\r\n        if (chatBoxRef.current) {\r\n            chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\r\n        }\r\n    }, [messages]);\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        if (input) {\r\n            setMessages([...messages, { text: input, sender: 'user' }]);\r\n            processUserMessage(input);\r\n            setInput('');\r\n        }\r\n    };\r\n\r\n\r\n    const processUserMessage = async (message) => {\r\n        try {\r\n            // Fetch API call to the Flask server\r\n            const response = await fetch('http://127.0.0.1:5000/chat', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ message: message })\r\n            });\r\n    \r\n            // Handling the response from the server\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                // Initialize an empty array for response messages\r\n                let responseMessages = [];\r\n    \r\n                // If user_topic is present in the response, add it to the messages first\r\n                if (data.user_topic) {\r\n                    responseMessages.push({ text: `Topic: ${data.user_topic}`, sender: 'bot' });\r\n                }\r\n                \r\n                // Add the response summary next\r\n                responseMessages.push({ text: data.response, sender: 'bot' });\r\n    \r\n                // Update the state with the new messages\r\n                setMessages(messages => [...messages, ...responseMessages]);\r\n            } else {\r\n                console.error('Failed to send message:', response.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error('There was a problem with the fetch operation:', error);\r\n        }\r\n    };\r\n\r\n    const toggleChartVisibility = () => { // Function to toggle the visibility of the chart\r\n        setShowChart(!showChart);\r\n    };\r\n    \r\n    const hideChart = () => { // Function to hide the chart\r\n        setShowChart(false);\r\n    };\r\n\r\n    const toggleTotalQueriesVisibility = () => {\r\n        setShowTotalQueries(!showTotalQueries);\r\n        if (!showTotalQueries) {\r\n          // Fetch and log the total queries when showing the queries\r\n          fetchTotalQueries();\r\n        }\r\n      };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div id=\"chat-box\" ref={chatBoxRef}> \r\n                {messages.map((message, index) => (\r\n                    <div key={index} className={`message ${message.sender === 'user' ? 'user' : 'bot'}`}>\r\n                        {message.text}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <form onSubmit={sendMessage}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Say something...\"\r\n                />\r\n                <button type=\"submit\">Send</button>\r\n            </form>\r\n            <div className=\"chart-controls\">\r\n              <button className=\"toggle-chart-btn\" onClick={toggleChartVisibility}>\r\n                {showChart ? \"Hide Chart\" : \"Show Chart\"}\r\n              </button>\r\n              {showChart && <button className=\"hide-chart-btn\" onClick={hideChart}>Hide Chart</button>}\r\n              <button className=\"show-queries-btn\" onClick={toggleTotalQueriesVisibility}>\r\n                 {showTotalQueries ? \"Hide Queries\" : \"Show Queries\"}\r\n                </button>\r\n            </div>\r\n            {showChart && <TopicDistributionPieChart />}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}