{"ast":null,"code":"var _jsxFileName = \"C:\\\\College\\\\IR\\\\Main-project3\\\\front-end\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\nimport TotalQueries from './TotalQueries';\nimport TopicDistributionPieChart from './TopicDistributionPieChart';\nimport { Chart as ChartJS, CategoryScale, LinearScale, ArcElement, Tooltip, Legend } from 'chart.js';\n\n// Register the necessary components for Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, ArcElement, Tooltip, Legend);\nconst Chatbot = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [showChart, setShowChart] = useState(false); // Added state for toggling the chart\n  const [showTotalQueries, setShowTotalQueries] = useState(false); // State to toggle total queries\n  const [coverVisible, setCoverVisible] = useState(true); // State for page cover visibility\n  const chatBoxRef = useRef(null);\n  const inactivityTimer = useRef(null);\n  useEffect(() => {\n    // Scroll to the bottom of the chat box whenever messages change\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const sendMessage = event => {\n    event.preventDefault();\n    if (input) {\n      setMessages([...messages, {\n        text: input,\n        sender: 'user'\n      }]);\n      processUserMessage(input);\n      if (isConversationEndingMessage(input)) {\n        clearTimeout(inactivityTimer.current);\n      } else {\n        resetInactivityTimer();\n      }\n      setInput('');\n    }\n  };\n  const isConversationEndingMessage = message => {\n    // Define messages that indicate the end of the conversation\n    const endingMessages = [\"thank you\", \"thanks\", \"bye\", \"goodbye\"];\n    return endingMessages.includes(message.toLowerCase().trim());\n  };\n  const isConversationEndingResponse = response => {\n    // Define server responses that indicate the end of the conversation\n    const endingResponses = [\"You're welcome\" /* other ending responses */];\n    return endingResponses.includes(response);\n  };\n  const resetInactivityTimer = () => {\n    // Clear existing timer\n    if (inactivityTimer.current) {\n      clearTimeout(inactivityTimer.current);\n    }\n\n    // Set a new timer\n    inactivityTimer.current = setTimeout(() => {\n      setMessages(messages => [...messages, {\n        text: \"How may I help you?\",\n        sender: 'bot'\n      }]);\n    }, 3000); // 3000 milliseconds = 3 seconds\n  };\n  const processUserMessage = async message => {\n    try {\n      const isRespondingToFollowUp = messages.length > 0 && messages[messages.length - 1].text === \"Do you want to ask anything else?\";\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: message,\n          respondingToFollowUp: isRespondingToFollowUp\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        let responseMessages = [];\n        if (data.user_topic) {\n          responseMessages.push({\n            text: `Topic: ${data.user_topic}`,\n            sender: 'bot'\n          });\n        }\n        responseMessages.push({\n          text: data.response,\n          sender: 'bot'\n        });\n        if (data.follow_up) {\n          // If it's a Solr response with a follow-up, clear the inactivity timer and set a new one for the follow-up\n          clearTimeout(inactivityTimer.current);\n          setTimeout(() => {\n            setMessages(messages => [...messages, {\n              text: data.follow_up,\n              sender: 'bot'\n            }]);\n          }, 2000);\n        } else {\n          // If it's a chit-chat response, reset the inactivity timer\n          if (!data.user_topic) {\n            resetInactivityTimer();\n          }\n        }\n        setMessages(messages => [...messages, ...responseMessages]);\n      } else {\n        console.error('Failed to send message:', response.statusText);\n      }\n    } catch (error) {\n      console.error('There was a problem with the fetch operation:', error);\n    }\n  };\n  const toggleChartVisibility = () => {\n    // Function to toggle the visibility of the chart\n    setShowChart(!showChart);\n  };\n  const hideChart = () => {\n    // Function to hide the chart\n    setShowChart(false);\n  };\n  const toggleTotalQueriesVisibility = () => {\n    setShowTotalQueries(!showTotalQueries);\n    if (!showTotalQueries) {\n      // Fetch and log the total queries when showing the queries\n      fetchTotalQueries();\n    }\n  };\n  const revealChatbot = () => {\n    // Start the slide-up transition\n    const cover = document.getElementById('page-cover');\n    if (cover) {\n      cover.style.transform = 'translateY(-100%)';\n    }\n\n    // Wait for transition to complete before removing the cover from the DOM\n    setTimeout(() => {\n      setCoverVisible(false);\n    }, 500); // This should match the duration of your CSS transition\n  };\n  const fetchTotalQueries = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/total-queries');\n      if (response.ok) {\n        const totalQueries = await response.json();\n        console.log('Total Queries:', totalQueries);\n      } else {\n        console.error('Failed to fetch total queries');\n      }\n    } catch (error) {\n      console.error('Error fetching total queries:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [coverVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"page-cover\",\n      onClick: revealChatbot,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cyber Seeker Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Please Click Anywhere on the screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"To access the Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-container ${coverVisible ? 'hidden' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-box\",\n        ref: chatBoxRef,\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender === 'user' ? 'user' : 'bot'}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Ask something...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }, this), showTotalQueries && /*#__PURE__*/_jsxDEV(TotalQueries, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"toggle-chart-btn\",\n          onClick: toggleChartVisibility,\n          children: showChart ? \"Back to Chat\" : \"Searched Topics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 15\n        }, this), showChart && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"hide-chart-btn\",\n          onClick: hideChart,\n          children: \"Back to Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"show-queries-btn\",\n          onClick: toggleTotalQueriesVisibility,\n          children: showTotalQueries ? \"Hide User Queries\" : \"Show User Queries\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this), showChart && /*#__PURE__*/_jsxDEV(TopicDistributionPieChart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"w6ALS1gJXjZq3tW8PSYOM4mPevk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TotalQueries","TopicDistributionPieChart","Chart","ChartJS","CategoryScale","LinearScale","ArcElement","Tooltip","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","register","Chatbot","_s","input","setInput","messages","setMessages","showChart","setShowChart","showTotalQueries","setShowTotalQueries","coverVisible","setCoverVisible","chatBoxRef","inactivityTimer","current","scrollTop","scrollHeight","sendMessage","event","preventDefault","text","sender","processUserMessage","isConversationEndingMessage","clearTimeout","resetInactivityTimer","message","endingMessages","includes","toLowerCase","trim","isConversationEndingResponse","response","endingResponses","setTimeout","isRespondingToFollowUp","length","fetch","method","headers","body","JSON","stringify","respondingToFollowUp","ok","data","json","responseMessages","user_topic","push","follow_up","console","error","statusText","toggleChartVisibility","hideChart","toggleTotalQueriesVisibility","fetchTotalQueries","revealChatbot","cover","document","getElementById","style","transform","totalQueries","log","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","map","index","onSubmit","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/College/IR/Main-project3/front-end/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chatbot.css';\r\nimport TotalQueries from './TotalQueries';\r\nimport TopicDistributionPieChart from './TopicDistributionPieChart';\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Register the necessary components for Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Chatbot = () => {\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [showChart, setShowChart] = useState(false); // Added state for toggling the chart\r\n    const [showTotalQueries, setShowTotalQueries] = useState(false); // State to toggle total queries\r\n    const [coverVisible, setCoverVisible] = useState(true); // State for page cover visibility\r\n    const chatBoxRef = useRef(null);\r\n    const inactivityTimer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Scroll to the bottom of the chat box whenever messages change\r\n        if (chatBoxRef.current) {\r\n            chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\r\n        }\r\n    }, [messages]);\r\n\r\n    const sendMessage = (event) => {\r\n      event.preventDefault();\r\n      if (input) {\r\n          setMessages([...messages, { text: input, sender: 'user' }]);\r\n          processUserMessage(input);\r\n\r\n          if (isConversationEndingMessage(input)) {\r\n              clearTimeout(inactivityTimer.current);\r\n          } else {\r\n              resetInactivityTimer();\r\n          }\r\n\r\n          setInput('');\r\n      }\r\n  };\r\n\r\n    const isConversationEndingMessage = (message) => {\r\n      // Define messages that indicate the end of the conversation\r\n      const endingMessages = [\"thank you\", \"thanks\", \"bye\", \"goodbye\"];\r\n      return endingMessages.includes(message.toLowerCase().trim());\r\n    };\r\n\r\n    const isConversationEndingResponse = (response) => {\r\n      // Define server responses that indicate the end of the conversation\r\n      const endingResponses = [\"You're welcome\", /* other ending responses */];\r\n      return endingResponses.includes(response);\r\n    };\r\n\r\n    const resetInactivityTimer = () => {\r\n      // Clear existing timer\r\n      if (inactivityTimer.current) {\r\n          clearTimeout(inactivityTimer.current);\r\n      }\r\n\r\n      // Set a new timer\r\n      inactivityTimer.current = setTimeout(() => {\r\n          setMessages(messages => [...messages, { text: \"How may I help you?\", sender: 'bot' }]);\r\n      }, 3000); // 3000 milliseconds = 3 seconds\r\n  };\r\n\r\n\r\n\r\n  const processUserMessage = async (message) => {\r\n    try {\r\n        const isRespondingToFollowUp = messages.length > 0 && messages[messages.length - 1].text === \"Do you want to ask anything else?\";\r\n        \r\n        const response = await fetch('http://127.0.0.1:5000/chat', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ message: message, respondingToFollowUp: isRespondingToFollowUp })\r\n        });\r\n\r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            let responseMessages = [];\r\n\r\n            if (data.user_topic) {\r\n                responseMessages.push({ text: `Topic: ${data.user_topic}`, sender: 'bot' });\r\n            }\r\n            \r\n            responseMessages.push({ text: data.response, sender: 'bot' });\r\n\r\n            if (data.follow_up) {\r\n                // If it's a Solr response with a follow-up, clear the inactivity timer and set a new one for the follow-up\r\n                clearTimeout(inactivityTimer.current);\r\n                setTimeout(() => {\r\n                    setMessages(messages => [...messages, { text: data.follow_up, sender: 'bot' }]);\r\n                }, 2000);\r\n            } else {\r\n                // If it's a chit-chat response, reset the inactivity timer\r\n                if (!data.user_topic) {\r\n                    resetInactivityTimer();\r\n                }\r\n            }\r\n\r\n            setMessages(messages => [...messages, ...responseMessages]);\r\n        } else {\r\n            console.error('Failed to send message:', response.statusText);\r\n        }\r\n    } catch (error) {\r\n        console.error('There was a problem with the fetch operation:', error);\r\n    }\r\n};\r\n\r\n  \r\n\r\n    const toggleChartVisibility = () => { // Function to toggle the visibility of the chart\r\n        setShowChart(!showChart);\r\n    };\r\n    \r\n    const hideChart = () => { // Function to hide the chart\r\n        setShowChart(false);\r\n    };\r\n\r\n    const toggleTotalQueriesVisibility = () => {\r\n        setShowTotalQueries(!showTotalQueries);\r\n        if (!showTotalQueries) {\r\n          // Fetch and log the total queries when showing the queries\r\n          fetchTotalQueries();\r\n        }\r\n      };\r\n\r\n    const revealChatbot = () => {\r\n        // Start the slide-up transition\r\n        const cover = document.getElementById('page-cover');\r\n        if (cover) {\r\n          cover.style.transform = 'translateY(-100%)';\r\n        }\r\n        \r\n        // Wait for transition to complete before removing the cover from the DOM\r\n        setTimeout(() => {\r\n          setCoverVisible(false);\r\n        }, 500); // This should match the duration of your CSS transition\r\n      };\r\n\r\n    const fetchTotalQueries = async () => {\r\n        try {\r\n          const response = await fetch('http://127.0.0.1:5000/api/total-queries');\r\n          if (response.ok) {\r\n            const totalQueries = await response.json();\r\n            console.log('Total Queries:', totalQueries);\r\n          } else {\r\n            console.error('Failed to fetch total queries');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching total queries:', error);\r\n        }\r\n      };\r\n\r\n      return (\r\n        <>\r\n          {coverVisible && (\r\n            <div id=\"page-cover\" onClick={revealChatbot}>\r\n              <h1>Cyber Seeker Chatbot</h1>\r\n              <h2>Please Click Anywhere on the screen</h2>\r\n              <h3>To access the Chatbot</h3>\r\n            </div>\r\n          )}\r\n          <div className={`chat-container ${coverVisible ? 'hidden' : ''}`}>\r\n            <div id=\"chat-box\" ref={chatBoxRef}>\r\n              {messages.map((message, index) => (\r\n                <div key={index} className={`message ${message.sender === 'user' ? 'user' : 'bot'}`}>\r\n                  {message.text}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <form onSubmit={sendMessage}>\r\n              <input\r\n                type=\"text\"\r\n                value={input}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                placeholder=\"Ask something...\"\r\n              />\r\n              <button type=\"submit\">Send</button>\r\n            </form>\r\n            {showTotalQueries && <TotalQueries />}\r\n            <div className=\"chart-controls\">\r\n              <button className=\"toggle-chart-btn\" onClick={toggleChartVisibility}>\r\n                {showChart ? \"Back to Chat\" : \"Searched Topics\"}\r\n              </button>\r\n              {showChart && <button className=\"hide-chart-btn\" onClick={hideChart}>Back to Chat</button>}\r\n              <button className=\"show-queries-btn\" onClick={toggleTotalQueriesVisibility}>\r\n                {showTotalQueries ? \"Hide User Queries\" : \"Show User Queries\"}\r\n              </button>\r\n            </div>\r\n            {showChart && <TopicDistributionPieChart />}\r\n          </div>\r\n        </>\r\n      );\r\n    };\r\n\r\n\r\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}